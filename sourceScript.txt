const transformRequest = (url, resourceType) => {
  const isMapboxRequest =
    url.slice(8, 22) === 'api.mapbox.com' ||
    url.slice(10, 26) === 'tiles.mapbox.com'
  return {
    url: isMapboxRequest ? url.replace('?', '?pluginName=sheetMapper&') : url,
  }
}
mapboxgl.accessToken =
  'pk.eyJ1IjoiaXNyYWVsdG9ycmVzIiwiYSI6ImNrZ3c5YmYzZDA4MHUyem4wYzc3bm1obXMifQ.iRvzqOTZ4XvuKovT8oz_7Q'
const map = new mapboxgl.Map({
  container: 'map',
  style: 'mapbox://styles/israeltorres/clid4suad002v01qpeper8peb',
  center: [-97.56988, 37.529768],
  attributionControl: false,
  zoom: 4,
  cooperativeGestures: true,
  transformRequest: transformRequest,
})
const sheetGeoid = '1V8Nuo8_H88fsiOLZDZq2Ga4VEamdBfZW4i8UrEBmEfA'
document.addEventListener('DOMContentLoaded', function () {
  fetch(
    `https://docs.google.com/spreadsheets/d/${sheetGeoid}/gviz/tq?tqx=out:csv&sheet=MapData`
  )
    .then((response) => response.text())
    .then((csvData) => {
      makeGeoJSON(csvData)
    })
    .catch((error) => console.log(error))
  function makeGeoJSON(csvData) {
    csv2geojson.csv2geojson(
      csvData,
      {
        latfield: 'latitude',
        lonfield: 'longitude',
        delimiter: ',',
      },
      // Add zoom and rotation controls to the map.
      function (err, data) {
        map.addControl(new mapboxgl.NavigationControl())
        /* Assign a unique ID to each store */
        data.features.forEach(function (store, i) {
          store.properties.id = i
        })

        let image =
          'https://uploads-ssl.webflow.com/62a918d5906c9b3387503b6a/6303d5536ea1606e02798418_pin_6.png'
        map.on('load', function () {
          //---------
          map.loadImage(image, (error, image) => {
            if (error) throw error
            // add image to the active style and make it SDF-enabled
            map.addImage('icon-marker', image, { sdf: true })
            map.addSource('points', {
              type: 'geojson',
              data: data,
            })
            //---------
            map.addLayer({
              id: 'csvData',
              type: 'circle',
              source: {
                type: 'geojson',
                data: data,
              },
              paint: {
                'circle-radius': {
                  base: 2,
                  stops: [
                    [10, 10],
                    [22, 180],
                  ],
                },
                'circle-color': [
                  'match',
                  ['get', 'property_type'],
                  'Self Storage',
                  '#1f88d0',
                  'RV Park/Campground',
                  '#fa5252',
                  '#ffffff',
                ],
              },
            })
          })

           //show location sidebar
        const toggleSidebarButton = document.getElementById(
          'toggleSidebarButton'
        )
        function toggleSidebar() {
          const sidebar = document.querySelector('.sidebar')
          sidebar.classList.toggle('show-sidebar')
        }
        toggleSidebarButton.addEventListener('click', toggleSidebar)
        const propertyTypeFilter = document.getElementById('propertyTypeFilter')
        propertyTypeFilter.addEventListener('change', updateMapVisibility)

        function updateMapVisibility() {
          const checkboxes = propertyTypeFilter.getElementsByTagName('input')
          const selectedPropertyTypes = []

          for (const checkbox of checkboxes) {
            if (checkbox.checked) {
              selectedPropertyTypes.push(checkbox.value)
            }
          }          
         
          map.setFilter('csvData', [
            'in',
            'property_type',
            ...selectedPropertyTypes,
          ])
        }
          map.on('click', 'csvData', function (e) {
            const marker = e.features[0]
            flyToStore(marker)
            /* Close all other popups and display popup for clicked store */
            createPopUp(marker)
            /* Highlight listing in sidebar */
            const activeItem = document.getElementsByClassName('active')

            if (activeItem[0]) {
              activeItem[0].classList.remove('active')
            }
          })
          //Change the cursor to a pointer when the mouse is over the places layer.
          map.on('mouseenter', 'csvData', function () {
            map.getCanvas().style.cursor = 'pointer'
          })
          // Change it back to a pointer when it leaves.
          map.on('mouseleave', 'places', function () {
            map.getCanvas().style.cursor = ''
          })
        })
       
        function flyToStore(currentFeature) {
          map.flyTo({
            center: currentFeature.geometry.coordinates,
            zoom: 5,
          })
        }

        function createPopUp(e) {
          let coordinates = e.geometry.coordinates.slice()
          let description =
            `<h3 class="mapboxgl-popup-content">` +
            e.properties.property_name +
            `</h3>` +
            `<h4 class="mapboxgl-popup-content">` +
            `<b>` +
            `Address: ` +
            `</b>` +
            e.properties.address +
            `<h4 class="mapboxgl-popup-content">` +
            `<a target='_blank' style="color:#ee9700!important; text-decoration:none;" href=` +
            e.properties.website +
            `>` +
            `Visit Website` +
            `</a>` +
            `</h4>` +
            `<h4 class="mapboxgl-popup-content">` +
            `<b>` +
            `Type Property:` +
            `</b>` +
            `<br/>` +
            e.properties.property_type +
            `</h4>` +
            `<h4 class="mapboxgl-popup-content">` +
            `<a target='_blank' style="color:#ee9700!important; text-decoration:none;" href=` +
            e.properties.link +
            `>` +
            `View large map` +
            `</a>` +
            `</h4>`
          const popUps = document.getElementsByClassName('mapboxgl-popup')
          if (popUps[0]) popUps[0].remove()
          new mapboxgl.Popup()
            .setLngLat(coordinates)
            .setHTML(description)
            .addTo(map)
        }
      }
    )
  }
})